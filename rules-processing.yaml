plugins:
  packages:
    - ccx_rules_ocp
    - ccx_rules_processing
service:
  extract_timeout:
  extract_tmp_dir: /var/tmp/ccx
  format: insights.formats._json.JsonFormat
  target_components: []
  unpacked_archive_size_limit: 1000000000

  consumer:
    name: ccx_messaging.consumers.synced_archive_consumer.SyncedArchiveConsumer
    kwargs:
      incoming_topic: ${KAFKA_SYNCED_TOPIC}
      group.id: ${KAFKA_GROUP_ID}
      bootstrap.servers: ${KAFKA_URL}

  downloader:
    name: ccx_messaging.downloaders.s3_downloader.S3Downloader
    kwargs:
      bucket: ${SOURCE_S3_BUCKET}
      access_key: ${S3_ACCESS_KEY}
      secret_key: ${S3_SECRET_KEY}
      endpoint: ${S3_ENDPOINT}

  publisher:
    name: ccx_messaging.publishers.idp_rule_processing_publisher.IDPRuleProcessingPublisher
    kwargs:
      outgoing_topic: ${KAFKA_RULES_TOPIC}
      bootstrap.servers: ${KAFKA_URL}

  watchers:
    - name: ccx_messaging.watchers.stats_watcher.StatsWatcher
      kwargs:
        prometheus_port: 8001
    - name: ccx_messaging.watchers.payload_tracker_watcher.PayloadTrackerWatcher
      kwargs:
        bootstrap.servers: ${KAFKA_URL}
        topic: ${PAYLOAD_TRACKER_TOPIC}
        service_name: rules-processing

  logging:
    version: 1
    disable_existing_loggers: false
    handlers:
      default:
        level: ${LOGLEVEL_STDOUT}
        class: logging.StreamHandler
        stream: ext://sys.stdout
        formatter: default

    formatters:
      default:
        format: '%(asctime)s %(name)s %(levelname)-8s %(message)s'
        datefmt: '%Y-%m-%d %H:%M:%S'

    root:
      level: ${LOGLEVEL_ROOT}
      handlers:
        - default

    loggers:
      ccx_messaging:
        level: ${LOGLEVEL_CCX_MESSAGING}

      insights_messaging:
        level: ${LOGLEVEL_INSIGHTS_MESSAGING}

      insights:
        level: ${LOGLEVEL_INSIGHTS}

      kafka:
        level: ${LOGLEVEL_KAFKA}